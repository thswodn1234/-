자바 자료구조 2022, 1회차 과정

1. 자바 기초 부족 문제
 1)   Point []p = new Point[10];  배열에 대한 참조 변수 선언
      p[0] = new Point(0,0); 새로운 객체를 생성하고 p[0]이 참조하는 것을 혼동하지 않도록 반복 학습 훈련이 필요
 2) 자바 파일내에
    class 정의 블럭의 배치
    자바 파일 클래스 내부에 static 변수 선언, static 함수 정의, main() 함수 정의 => 40일 되어도 혼동하는 학생 있다 => 반복 훈련이 필요하다.
 3) interface, 람다식, comparable, comparator 반복 학습 훈련이 필요하다.

1장 알고리즘
1단계: 스트링 배열의 sorting, 중복 제거, merge하는 알고리즘 구현하기
 - String []st = new String()
   1) Sort() 구현하기: 여러가지 방법이 있다 
//	Arrays.sort(s);
//	Arrays.sort(s, Comparator.naturalOrder());
//	Arrays.sort(s, Comparator.reverseOrder()); 
	
	/*
	Arrays.sort(s, new Comparator<String>() {
	    @Override
	    public int compare(String o1, String o2) {
	        return o2.compareTo(o1);            // 내림차순으로 정렬
	    }
	});
	*/
//	s = Arrays.stream(s).sorted().toArray(String[]::new);	
//	s = Arrays.stream(s).sorted(Collections.reverseOrder()).toArray(String[]::new);
   2) merge list 만들기
   3) 중복 제거하기 - 스트링 배열에서 삭제가 어렵다

2단계: ArrayList<String> list의 sort, 중복 제거
   1) Sort() 구현하기
   2) merge list 만들기 - iterator를 사용한 구현
   3) 중복 제거하기 - List서 삭제가 쉽다
- ArrayList<String> list = new ArrayList<string>();
- 화면에서 스트링을 입력받아 list에 Add()한다.
- sort 정렬한다
- merge하여 sort한다.

2장 기본 자료구조
1단계: 난수를 생성하여 arrayList 생성, sort, 역순으로 정렬, 화면에서 입력받아 정렬된 리스트에서 binary search() 함수 사용, 두개의 list가 같은지 비교한다
2단계: 페이지 91의 클래스 배열, vector class 사용, 객체 배열, sort 정렬, binary search() 사용, 두개의 객체 배열 리스트가 같은지 비교

3장 검색
1단계: 페이지 125, compareTo()함수의 구현
- 사용자 정의 객체들로 구성된 ArrayList의 정렬
- 페이지 127: 실습 3-7

   1) 객체 배열의 Sort() 구현하기::compareTo()함수를 사용하기 
   2) 객체 배열의 merge list 만들기 - iterator를 사용한 구현 => 마지막 스트링을 빼먹는 문제 해결 필요
   3) 객체 배열의 중복 제거하기 - List서 삭제가 쉽다
   4) binary search() 사용하기


public interface Comparable<T> {
   public int compareTo(T o);
}

public interface Comparator<T> {
   public int compare(T o1, T o2);
}

import java.util.Comparator;
public class Car implements Comparator<Car> {
   @Override
   public int compare(Car o1, Car o2) { }
}

public static Comparator<Car> c2 = new Comparator<Car> {
   @Override
   public int compare(Car c1, Car c2) {
      retuen o1.price - o2.price;
   }
};

=> 익명 객체
Car c = new Car();

Car xc = new Car() { //익명 객체
   @Override
   int getData() { return price;
   }
};

public class Example {

    interface MyInterface {
        void doSomething();
    }

    public static void main(String[] args) {

        MyInterface myClass = new MyInterface() {
            @Override
            public void doSomething() {
                System.out.println("doSomething");
            }
        };
        myClass.doSomething();
    }
}
-----------------
public class Example2 {

    public static abstract class MyAbstractClass {
        public abstract void doSomething();
    }

    public static void main(String[] args) {

        MyAbstractClass myClass = new MyAbstractClass() {
            @Override
            public void doSomething() {
                System.out.println("doSomething");
            }
        };
        myClass.doSomething();
    }
}
-----------------------------------------------
// Java Program to Sort an ArrayList
 
// Importing generic java files
import java.util.*;
 
// Implements comparable interface into custom class
class Car implements Comparable<Car> {
    int ModalNo;
    String name;
    int stock;
 
    // Parameterized constructor of the class
    Car(int ModalNo, String name, int stock)
    {
        this.ModalNo = ModalNo;
        this.name = name;
        this.stock = stock;
    }
 
    // Override the compareTo method - 이 함수가 정의되지 않으면 Collections.sort(car); 는 에러 발생한다.
    public int compareTo(Car car)
    {
        if (stock == car.stock)
            return 0;
        else if (stock > car.stock)
            return 1;
        else
            return -1;
    }
}
 
// Main driver method
class GFG {
 
    // Main driver method
    public static void main(String[] args)
    {
        // Create the ArrayList object
        ArrayList<Car> c = new ArrayList<Car>();
        c.add(new Car(2018, "Kia", 20));
        c.add(new Car(2020, "MG", 13));
        c.add(new Car(2013, "creta", 10));
        c.add(new Car(2015, "BMW", 50));
        c.add(new Car(2017, "Audi", 45));
 
        // Call the sort function
        Collections.sort(c); //car에 대한 비교는 compareTo()를 사용한다
 
        // Iterate over ArrayList using for each loop
        for (Car car : c) {
 
            // Print the sorted ArrayList
            System.out.println(car.ModalNo + " " + car.name
                               + " " + car.stock);
        }
    }
}
====================================
// Java Program to Sort an ArrayList
 
// Step 1: ImportingDB files
import java.util.*;
 
// Class 1: Parent Class
class Car {
    int ModalNo;
    String name;
    int stock;
 
    // Parameterized constructor
    Car(int ModalNo, String name, int stock)
    {
        this.ModalNo = ModalNo;
        this.name = name;
        this.stock = stock;
    }
}
 
// Class 2: Child class
// creates the comparator for comparing stock value
class StockComparator implements Comparator<Car> {
 
    // Function to compare
    public int compare(Car c1, Car c2)
    {
        if (c1.stock == c2.stock)
            return 0;
        else if (c1.stock > c2.stock)
            return 1;
        else
            return -1;
    }
}
 
class GFG {
 
    // Main driver method
    public static void main(String[] args)
    {
        // Create the ArrayList object
        ArrayList<Car> c = new ArrayList<Car>();
        c.add(new Car(2018, "Kia", 20));
        c.add(new Car(2020, "MG", 13));
        c.add(new Car(2013, "creta", 10));
        c.add(new Car(2015, "BMW", 50));
        c.add(new Car(2017, "Audi", 45));
 
        // Call the sort function
        Collections.sort(c, new StockComparator());
 
        // For each loop to iterate
        for (Car car : c) {
           
          // Print the sorted ArrayList
            System.out.println(car.stock + " " + car.name
                               + " " + car.ModalNo);
        }
    }
}
  //comparator는 익명 클래스 객체로서 method를 갖고 있다 
//사용자 정의 객체 클래스를 수정할 수 없는 경우에 사용
// 다른 정렬 기준을 적용하고자 하는 경우에 사용
  Comparator<Fruit> cc = new Comparator<Fruit>() {
        public int compare(Fruit u1, Fruit u2) {
          return u1.compareTo(u2);
        }
      };
3장 127 - comparator, comparable에 대한 실습으로 사용자 정의 객체에 대한 정렬시 사용하는 것을 실습하는 것이 중요
<<람다식 표현>>
 Collections.sort(Fruit, (a,b) -> b.getValue() - a.getValue());

4. 4장 stack & queue
- generic stack으로 예외처리 -> 예외 객체 생성 오류를 실습
- stack의 데이터를 배열이 아닌 ArrayList로 구현하기 실습 > 참조 변수의 COPY 문제를 해결 stk[ptr++] = p; 문제점을 해결하는 것이 필요
  > stack 클래스가 패키지 내에 여러개 존재시 오류 문제

- stack의 data를 배열로 선언시 point 객체를 push할 때 객체는 1개에 stack의 여러 멤버가 같은 point 객체를 공유하는 문제가 발생한다. - 미로찾기 문제에서 point 저장시 문제가 됨

5. 5장 재귀 알고리즘
 *  backtracking 실습 - stack을 사용한 구현
 * mouse 미로 문제 - stack을 사용한 구현: 자료구조책/홍봉희에서 가져온다

 5-4 8 queen 문제
   - stack을 사용한 구현
6. 정렬
 6.6 quick sort
  - 232페이지 실습 6-10을 수정하여 stack 1개를 이용한 구현으로 고친다.

 6.7 merge 정렬
  - recursive로 구현: stack을 이용한 backtracking 구현은 너무 힘들다 > recursive 알고리즘 구현 실습

 6.8 heap 정렬
 - 자료구조 heap 설명자료
   1) heap 구조 만들기
   2) Max heap에서 delete 함수 구현

8. 8장 linked list
 1) 312페이지, 실습 8-2 구현 실습: add(), delete() 구현한다
    - add()시에 회원번호로 정렬되게 구현한다
 2) 351페이지 doubly linked list 구현 실습

 @ FunctionalInterface
 public interface Cmparator<T> {
   int compare(T o1, T o2);
 }

sort(list, Comparator<? super T> c); //T의 superclass와 Object이 Comparator의 parameter로 들어갈 수 있다.

class Phone implements Comparator<Phone> {
   @Override
   public int compare(Phone p1, Phone p2) {
      return p1.price - p2.price;
   }
 }


9장 tree
 - 383페이지: 실습 9-2

10장 hashing
 - 412페이지: 실습 10-3



